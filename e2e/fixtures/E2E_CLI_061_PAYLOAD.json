{
	"document": [
		{
			"args": [],
			"command": {
				"golang:1.16.2-alpine3.12 as build_env": [
					{
						"Cmd": "from",
						"EndLine": 1,
						"Flags": [],
						"JSON": false,
						"Original": "FROM golang:1.16.2-alpine3.12 as build_env",
						"SubCmd": "",
						"Value": [
							"golang:1.16.2-alpine3.12",
							"as",
							"build_env"
						],
						"_kics_line": 1
					},
					{
						"Cmd": "run",
						"EndLine": 3,
						"Flags": [],
						"JSON": false,
						"Original": "RUN command",
						"SubCmd": "",
						"Value": [
							"command"
						],
						"_kics_line": 3
					}
				]
			},
			"id": "0",
			"file": "file"
		},
		{
			"id": "0",
			"components": {
				"securitySchemes": {
					"oAuth2AuthCodeNeg2": {
						"description": "For more information, see https://api.my.company.com/docs/oauth",
						"flows": {
							"authorizationCode": {
								"authorizationUrl": "https://api.my.company.com/oauth/authorize",
								"scopes": {
									"read:api": "read your apis",
									"write:api": "modify apis in your account"
								},
								"tokenUrl": "https://api.my.company.com/oauth/token"
							}
						},
						"type": "oauth2"
					}
				}
			},
			"info": {
				"title": "Simple API Overview",
				"version": "1.0.0"
			},
			"openapi": "3.0.0",
			"paths": {
				"/": {
					"get": {
						"operationId": "listVersionsv2",
						"responses": {
							"200": {
								"content": {
									"application/json": {
										"examples": {
											"foo": {
												"value": {
													"versions": [
														{
															"id": "v2.0",
															"links": [
																{
																	"href": "http://127.0.0.1:8774/v2/",
																	"rel": "self"
																}
															],
															"status": "CURRENT",
															"updated": "2011-01-21T11:33:21Z"
														}
													]
												}
											}
										}
									}
								},
								"description": "200 response"
							}
						},
						"summary": "List API versions"
					}
				}
			},
			"file": "file"
		},
		{
			"paths": {
				"/": {
					"get": {
						"operationId": "listVersionsv2",
						"responses": {
							"200": {
								"content": {
									"application/json": {
										"examples": {
											"foo": {
												"value": {
													"versions": [
														{
															"id": "v2.0",
															"links": [
																{
																	"href": "http://127.0.0.1:8774/v2/",
																	"rel": "self"
																}
															],
															"status": "CURRENT",
															"updated": "2011-01-21T11:33:21Z"
														}
													]
												}
											}
										}
									}
								},
								"description": "200 response"
							}
						},
						"summary": "List API versions"
					}
				}
			},
			"security": [
				{
					"OAuth2": [
						"write",
						"read"
					]
				}
			],
			"file": "file",
			"id": "0",
			"components": {
				"securitySchemes": {
					"OAuth2": {
						"flows": {
							"authorizationCode": {
								"authorizationUrl": "https://example.com/oauth/authorize",
								"scopes": {
									"read": "read objects in your account",
									"write": "modify objects in your account"
								},
								"tokenUrl": "https://example.com/oauth/token"
							}
						},
						"type": "oauth2"
					}
				}
			},
			"info": {
				"title": "Simple API Overview",
				"version": "1.0.0"
			},
			"openapi": "3.0.0"
		},
		{
			"id": "0",
			"playbooks": [
				{
					"hosts": "webservers",
					"name": "Update web servers",
					"remote_user": "root",
					"tasks": [
						{
							"ansible.builtin.yum": {
								"name": "httpd",
								"state": "latest"
							},
							"name": "Ensure apache is at the latest version"
						},
						{
							"ansible.builtin.template": {
								"dest": "/etc/httpd.conf",
								"src": "/srv/httpd.j2"
							},
							"name": "Write the apache config file"
						}
					]
				},
				{
					"hosts": "databases",
					"name": "Update db servers",
					"remote_user": "root",
					"tasks": [
						{
							"ansible.builtin.yum": {
								"name": "postgresql",
								"state": "latest"
							},
							"name": "Ensure postgresql is at the latest version"
						},
						{
							"ansible.builtin.service": {
								"name": "postgresql",
								"state": "started"
							},
							"name": "Ensure that postgresql is started"
						}
					]
				}
			],
			"file": "file"
		},
		{
			"Resources": {
				"ConfigRule": {
					"Properties": {
						"ConfigRuleName": "access-keys-rotated",
						"InputParameters": {
							"maxAccessKeyAge": 100
						},
						"MaximumExecutionFrequency": "TwentyFour_Hours",
						"Source": {
							"Owner": "AWS",
							"SourceIdentifier": "ACCESS_KEYS_ROTATED"
						}
					},
					"Type": "AWS::Config::ConfigRule"
				}
			},
			"id": "0",
			"file": "file"
		},
		{
			"file": "file",
			"id": "0",
			"apiVersion": "aws.stacks.crossplane.io/v1alpha1",
			"kind": "AWSSample",
			"metadata": {
				"name": "test"
			},
			"spec": {
				"credentialsSecretRef": {
					"key": "credentials",
					"name": "aws-account-creds",
					"namespace": "crossplane-system"
				},
				"region": "us-west-2"
			}
		},
		{
			"services": {
				"webapp": {
					"build": {
						"args": {
							"buildno": 1
						},
						"context": "./dir",
						"dockerfile": "Dockerfile-alternate",
						"ports": [
							"8080:8080",
							"3000:3000"
						]
					}
				}
			},
			"version": "3.9",
			"file": "file",
			"id": "0"
		},
		{
			"id": "0",
			"resources": [
				{
					"name": "quickstart-deployment-vm",
					"properties": {
						"disks": [
							{
								"autoDelete": true,
								"boot": true,
								"deviceName": "boot",
								"initializeParams": {
									"sourceImage": "https://www.googleapis.com/compute/v1/projects/debian-cloud/global/images/family/debian-9"
								},
								"type": "PERSISTENT"
							}
						],
						"machineType": "https://www.googleapis.com/compute/v1/projects/[MY_PROJECT]/zones/us-central1-f/machineTypes/f1-micro",
						"networkInterfaces": [
							{
								"accessConfigs": [
									{
										"name": "External NAT",
										"type": "ONE_TO_ONE_NAT"
									}
								],
								"network": "https://www.googleapis.com/compute/v1/projects/[MY_PROJECT]/global/networks/default"
							}
						],
						"zone": "us-central1-f"
					},
					"type": "compute.v1.instance"
				}
			],
			"file": "file"
		},
		{
			"file": "file",
			"id": "0",
			"apiVersion": "v1",
			"kind": "Service",
			"metadata": {
				"labels": {
					"app.kubernetes.io/instance": "kics-helm",
					"app.kubernetes.io/managed-by": "Helm",
					"app.kubernetes.io/name": "test_helm",
					"app.kubernetes.io/version": "1.16.0",
					"helm.sh/chart": "test_helm-0.1.0"
				},
				"name": "kics-helm-test_helm"
			},
			"spec": {
				"ports": [
					{
						"name": "http",
						"port": 80,
						"protocol": "TCP",
						"targetPort": "http"
					}
				],
				"selector": {
					"app.kubernetes.io/instance": "kics-helm",
					"app.kubernetes.io/name": "test_helm"
				},
				"type": "ClusterIP"
			}
		},
		{
			"id": "0",
			"apiVersion": "rbac.authorization.k8s.io/v1beta1",
			"kind": "ClusterRoleBinding",
			"metadata": {
				"name": "tiller-clusterrolebinding"
			},
			"roleRef": {
				"apiGroup": "",
				"kind": "ClusterRole",
				"name": "view"
			},
			"spec": null,
			"subjects": [
				{
					"kind": "ServiceAccount",
					"name": "tiller",
					"namespace": "kube-system"
				}
			],
			"file": "file"
		},
		{
			"id": "0",
			"apiVersion": "serving.knative.dev/v1",
			"kind": "Service",
			"metadata": {
				"name": "autoscale-go",
				"namespace": "default"
			},
			"spec": {
				"template": {
					"metadata": {
						"annotations": {
							"autoscaling.knative.dev/class": "hpa.autoscaling.knative.dev",
							"autoscaling.knative.dev/metric": "cpu"
						}
					},
					"spec": {
						"containers": [
							{
								"image": "gcr.io/knative-samples/autoscale-go:0.1"
							}
						]
					}
				}
			},
			"file": "file"
		},
		{
			"file": "file",
			"id": "0",
			"components": {
				"securitySchemes": {
					"OAuth2": {
						"flows": {
							"authorizationCode": {
								"authorizationUrl": "https://example.com/oauth/authorize",
								"scopes": {
									"read": "read objects in your account",
									"write": "modify objects in your account"
								},
								"tokenUrl": "https://example.com/oauth/token"
							}
						},
						"type": "oauth2"
					}
				}
			},
			"info": {
				"title": "Simple API Overview",
				"version": "1.0.0"
			},
			"openapi": "3.0.0",
			"paths": {
				"/": {
					"get": {
						"operationId": "listVersionsv2",
						"responses": {
							"200": {
								"content": {
									"application/json": {
										"examples": {
											"foo": {
												"value": {
													"versions": [
														{
															"id": "v2.0",
															"links": [
																{
																	"href": "http://127.0.0.1:8774/v2/",
																	"rel": "self"
																}
															],
															"status": "CURRENT",
															"updated": "2011-01-21T11:33:21Z"
														}
													]
												}
											}
										}
									}
								},
								"description": "200 response"
							}
						},
						"summary": "List API versions"
					}
				}
			},
			"security": [
				{
					"OAuth2": [
						"write",
						"read"
					]
				}
			]
		},
		{
			"id": "0",
			"resource": {
				"aws_alb": {
					"foo33": {
						"internal": false,
						"subnets": [
							"${aws_subnet.foo.id}",
							"${aws_subnet.bar.id}"
						]
					}
				},
				"aws_wafregional_web_acl_association": {
					"foo_waf33": {
						"resource_arn": "${aws_alb.foo33.arn}",
						"web_acl_id": "${aws_wafregional_web_acl.foo.id}"
					}
				}
			},
			"file": "file"
		},
		{
			"id": "0",
			"description": "An EKS cluster",
			"name": "aws-eks",
			"outputs": {
				"kubeconfig": "${cluster.kubeconfig}"
			},
			"resources": {
				"cluster": {
					"properties": {
						"desiredCapacity": 2,
						"instanceType": "t2.medium",
						"maxSize": 2,
						"minSize": 1,
						"subnetIds": "${subnetIds}",
						"vpcId": "${vpcId}"
					},
					"type": "eks:Cluster"
				}
			},
			"runtime": "yaml",
			"variables": {
				"subnetIds": {
					"Fn::Invoke": {
						"Arguments": {
							"vpcId": "${vpcId}"
						},
						"Function": "aws:ec2:getSubnetIds",
						"Return": "ids"
					}
				},
				"vpcId": {
					"Fn::Invoke": {
						"Arguments": {
							"default": true
						},
						"Function": "aws:ec2:getVpc",
						"Return": "id"
					}
				}
			},
			"file": "file"
		},
		{
			"frameworkVersion": "2",
			"functions": {
				"createPost": {
					"events": [
						{
							"http": {
								"method": "POST",
								"path": "/post"
							}
						}
					],
					"handler": "handler.createPost"
				},
				"deletePost": {
					"events": [
						{
							"http": {
								"method": "delete",
								"path": "/post/{id}"
							}
						}
					],
					"handler": "handler.deletePost"
				},
				"getAllPosts": {
					"events": [
						{
							"http": {
								"method": "get",
								"path": "/posts"
							}
						}
					],
					"handler": "handler.getAllPosts"
				},
				"getPost": {
					"events": [
						{
							"http": {
								"method": "get",
								"path": "/post/{id}"
							}
						}
					],
					"handler": "handler.getPost"
				},
				"getPosts": {
					"events": [
						{
							"http": {
								"method": "get",
								"path": "/posts/{number}"
							}
						}
					],
					"handler": "handler.getPosts"
				},
				"updatePost": {
					"events": [
						{
							"http": {
								"method": "put",
								"path": "/post/{id}"
							}
						}
					],
					"handler": "handler.updatePost"
				}
			},
			"provider": {
				"environment": "${self:custom.settings}",
				"iamRoleStatements": [
					{
						"Action": [
							"dynamodb:DescribeTable",
							"dynamodb:Scan",
							"dynamodb:GetItem",
							"dynamodb:PutItem",
							"dynamodb:UpdateItem",
							"dynamodb:DeleteItem"
						],
						"Effect": "Allow",
						"Resource": [
							"arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.settings.POSTS_TABLE}"
						]
					}
				],
				"lambdaHashingVersion": 20201221,
				"name": "aws",
				"region": "us-east-1",
				"runtime": "nodejs12.x",
				"stage": "dev"
			},
			"resources": {
				"Resources": {
					"PostsTable": {
						"Properties": {
							"AttributeDefinitions": [
								{
									"AttributeName": "id",
									"AttributeType": "S"
								}
							],
							"KeySchema": [
								{
									"AttributeName": "id",
									"KeyType": "HASH"
								}
							],
							"ProvisionedThroughput": {
								"ReadCapacityUnits": 1,
								"WriteCapacityUnits": 1
							},
							"TableName": "${self:custom.settings.POSTS_TABLE}"
						},
						"Type": "AWS::DynamoDB::Table"
					}
				}
			},
			"service": "myservice",
			"file": "file",
			"id": "0",
			"custom": {
				"settings": {
					"POSTS_TABLE": "posts"
				}
			}
		},
		{
			"id": "0",
			"somekey": "someval",
			"file": "file"
		}
	]
}
